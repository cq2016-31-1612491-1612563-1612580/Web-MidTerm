/**
 * A passport.js strategy for GOV.UK Verify
 */
/** */
import { Strategy } from 'passport-strategy';
import * as express from 'express';
import VerifyServiceProviderClient from './verify-service-provider-client';
import { TranslatedMatchingResponseBody, TranslatedIdentityResponseBody } from './verify-service-provider-api/translated-response-body';
/**
 * Configuration options and callbacks for the `PassportVerifyStrategy`.
 */
export interface PassportVerifyOptions {
}
/**
 * A passport.js strategy for GOV.UK Verify
 *
 * ```
 * passport.use(passportVerifyStrategy)
 * ```
 *
 * Users of `passport-verify` should use [[createStrategy]] to create
 * instances of `PassportVerifyStrategy` rather than calling the constructor directly.
 */
export declare class PassportVerifyStrategy extends Strategy {
    private client;
    private createUser;
    private verifyUser;
    private handleIdentity;
    private saveRequestId;
    private loadRequestId;
    private serviceEntityId?;
    private samlFormTemplateName?;
    private levelOfAssurance;
    name: string;
    constructor(client: VerifyServiceProviderClient, createUser: (user: TranslatedMatchingResponseBody) => any, verifyUser: (user: TranslatedMatchingResponseBody) => any, handleIdentity: (identity: TranslatedIdentityResponseBody) => any, saveRequestId: (requestId: string, request: express.Request) => any, loadRequestId: (request: express.Request) => string, serviceEntityId?: string | undefined, samlFormTemplateName?: string | undefined, levelOfAssurance?: ('LEVEL_1' | 'LEVEL_2'));
    authenticate(req: express.Request, options?: any): Promise<void>;
    success(user: any, info: TranslatedMatchingResponseBody | TranslatedIdentityResponseBody): void;
    fail(challenge: any, status?: number): void;
    error(reason: Error): void;
    private _handleRequest;
    private _translateResponse;
    private _handleSuccessResponse;
    private _handleSuccessMatchingResponse;
    private _verifyUser;
    private _handleIdentity;
    private _renderAuthnRequest;
}
/**
 * Creates an instance of [[PassportVerifyStrategy]]
 *
 * This version of the function should only be used if your service uses the legacy setup. A legacy setup
 * involves connecting to GOV.UK Verify with a Matching Service Adapter (MSA).
 *
 * @param verifyServiceProviderHost The URL that the Verify Service Provider is running on (e.g. http://localhost:50400)
 * @param createUser A callback that will be invoked when a response with a new user is received.
 * The `user` object will contain the users' attributes (i.e. firstName, surname etc.).
 * Your callback should store details of the user in your datastore and return an object representing the user.
 * @param verifyUser A callback that will be invoked when a response with a matched user is received.
 * Your callback should look the user up in your datastore using their `pid` (persistent identitfier)
 * and return an object representing the user.
 * @param saveRequestId A callback that will be invoked to save the requestId that has been generated by
 * the verify service provider. Your callback should save the request Id in a secure manner so that it
 * can be matched against the corresponding SAML response.
 * @param loadRequestId A callback that will be invoked to load the requestId that has been securely saved
 * for the user's session.
 * @param serviceEntityId (Optional) The entityId that will be passed to the Verify Service Provider. This is
 * only required if the service provider is configured to be multi tenanted.
 * @param samlFormTemplateName (Optional) The name of a template in your service which will provide the form
 * used to post an authn request. If present, this will be rendered with the ssoLocation and samlRequest passed
 * in. Otherwise, a default form will be used. You should use this option if you wish to style the form, which
 * should be autoposting so only seen if the user has javascript disabled, to match the rest of your service.
 * @param levelOfAssurance (Optional) LEVEL_1 or LEVEL_2 - defaults to LEVEL_2. The Level of Assurance to
 * request from the Verify Service Provider and the minimum level to expect in the Response (e.g. if you
 * specify LEVEL_1 a LEVEL_2 Response would also be permissible).
 * @returns A strategy to be registered in passport with
 * ```
 * passport.use(passportVerifyStrategy)
 * ```
 */
export declare function createStrategy(verifyServiceProviderHost: string, createUser: (user: TranslatedMatchingResponseBody) => object | false, verifyUser: (user: TranslatedMatchingResponseBody) => object | false, saveRequestId: (requestId: string, request: express.Request) => void, loadRequestId: (request: express.Request) => string, serviceEntityId?: string, samlFormTemplateName?: string, levelOfAssurance?: ('LEVEL_1' | 'LEVEL_2')): PassportVerifyStrategy;
/**
 * Creates an instance of [[PassportVerifyStrategy]]
 *
 * This version of the function should only be used if your service connects to GOV.UK Verify using the
 * Verify Service Provider (VSP) without a Matching Service Adapter (MSA).
 *
 * @param verifyServiceProviderHost The URL that the Verify Service Provider is running on (e.g. http://localhost:50400)
 * @param handleIdentity A callback that will be invoked when a response with an identity is received.
 * The `identity` object will contain the users' attributes (i.e. firstName, surname etc.).
 * Your callback should store details of the user in your datastore and return an object representing the user.
 * @param saveRequestId A callback that will be invoked to save the requestId that has been generated by
 * the verify service provider. Your callback should save the request Id in a secure manner so that it
 * can be matched against the corresponding SAML response.
 * @param loadRequestId A callback that will be invoked to load the requestId that has been securely saved
 * for the user's session.
 * @param serviceEntityId (Optional) The entityId that will be passed to the Verify Service Provider. This is
 * only required if the service provider is configured to be multi tenanted.
 * @param samlFormTemplateName (Optional) The name of a template in your service which will provide the form
 * used to post an authn request. If present, this will be rendered with the ssoLocation and samlRequest passed
 * in. Otherwise, a default form will be used. You should use this option if you wish to style the form, which
 * should be autoposting so only seen if the user has javascript disabled, to match the rest of your service.
 * @param levelOfAssurance (Optional) LEVEL_1 or LEVEL_2 - defaults to LEVEL_2. The Level of Assurance to
 * request from the Verify Service Provider and the minimum level to expect in the Response (e.g. if you
 * specify LEVEL_1 a LEVEL_2 Response would also be permissible).
 * @returns A strategy to be registered in passport with
 * ```
 * passport.use(passportVerifyStrategy)
 * ```
 */
export declare function createIdentityStrategy(verifyServiceProviderHost: string, handleIdentity: (identity: TranslatedIdentityResponseBody) => object | false, saveRequestId: (requestId: string, request: express.Request) => void, loadRequestId: (request: express.Request) => string, serviceEntityId?: string, samlFormTemplateName?: string, levelOfAssurance?: ('LEVEL_1' | 'LEVEL_2')): PassportVerifyStrategy;
