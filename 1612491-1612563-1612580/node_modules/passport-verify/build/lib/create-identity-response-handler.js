"use strict";
/**
 * The contents of this file are only relevant if your service connects
 * to GOV.UK Verify using the Verify Service Provider (VSP) without a Matching
 * Service Adapter (MSA).
 *
 *
 * create-identity-response-handler
 *
 * Helper function to make handling callbacks from
 * `passport.authenticate('verify', callback)` easier.
 *
 * This is necessary because there are a number of different scenarios
 * that services need to handle when dealing with Verify responses.
 * passport.js isn't aware of these, so the interface it provides is not ideal.
 */
/** */
Object.defineProperty(exports, "__esModule", { value: true });
const translated_response_body_1 = require("./verify-service-provider-api/translated-response-body");
/**
 * The `createIdentityResponseHandler` function should be used if your service
 * connects to GOV.UK Verify using the Verify Service Provider (VSP) without a
 * Matching Service Adapter (MSA)
 *
 * This function makes it easier to handle the passport.authenticate() callback. The
 * function takes separate callbacks for each of the response scenarios you have to
 * handle and returns a function that will invoke the appropriate callback when called
 * by passport.
 *
 * @param responseScenarios Callbacks to handle each type of response that GOV.UK Verify can return
 */
function createIdentityResponseHandler(responseScenarios) {
    return function (error, identity, infoOrError, status) {
        if (error) {
            return responseScenarios.onError(error);
        }
        if (identity) {
            const responseBody = infoOrError;
            return responseScenarios.onIdentityVerified(identity);
        }
        switch (infoOrError) {
            case translated_response_body_1.Scenario.REQUEST_ERROR:
                return responseScenarios.onError(new Error('SAML Response was an error'));
            case translated_response_body_1.Scenario.NO_AUTHENTICATION:
                return responseScenarios.onNoAuthentication();
            case translated_response_body_1.Scenario.AUTHENTICATION_FAILED:
                return responseScenarios.onAuthnFailed();
            default:
                return responseScenarios.onError(new Error(`Unrecognised Scenario ${infoOrError}`));
        }
    };
}
exports.createIdentityResponseHandler = createIdentityResponseHandler;
