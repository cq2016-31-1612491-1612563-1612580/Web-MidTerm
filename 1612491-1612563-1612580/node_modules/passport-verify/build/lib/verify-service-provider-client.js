"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An HTTP client that communicates with the Verify Service Provider.
 *
 * Users of `passport-verify` should use `createStrategy` rather than
 * instantiating this class directly.
 */
/** */
const request = require("request-promise-native");
const debug = require("debug");
const translated_response_body_1 = require("./verify-service-provider-api/translated-response-body");
class VerifyServiceProviderClient {
    constructor(verifyServiceProviderHost) {
        this.verifyServiceProviderHost = verifyServiceProviderHost;
        this.infoLog = debug('passport-verify:log');
        this.requestLog = debug('passport-verify:requests');
    }
    generateAuthnRequest(levelOfAssurance, entityId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let requestBody = { levelOfAssurance };
                if (entityId) {
                    requestBody.entityId = entityId;
                }
                const responseBody = yield this.sendRequest('/generate-request', requestBody);
                this.infoLog('authn request generated, request id: ', responseBody.requestId);
                return {
                    status: 200,
                    body: responseBody
                };
            }
            catch (reason) {
                this.infoLog('error generating authn request: ', reason, 'Use "passport-verify:requests" log to see full request');
                return {
                    status: reason.statusCode,
                    body: reason.error
                };
            }
        });
    }
    translateResponse(samlResponse, requestId, levelOfAssurance, entityId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let requestBody = { samlResponse, requestId, levelOfAssurance: levelOfAssurance };
                if (entityId) {
                    requestBody.entityId = entityId;
                }
                const responseBody = yield this.sendRequest('/translate-response', requestBody);
                const translatedResponseBody = responseBody.scenario === translated_response_body_1.Scenario.IDENTITY_VERIFIED ? responseBody : responseBody;
                this.infoLog('response translated for request: ', requestId, 'Scenario: ', responseBody.scenario);
                return {
                    status: 200,
                    body: translatedResponseBody
                };
            }
            catch (reason) {
                this.infoLog('error translating response for request id: ', requestId, reason, 'Use "passport-verify:requests" log to see full request');
                return {
                    status: reason.statusCode,
                    body: reason.error
                };
            }
        });
    }
    sendRequest(endpoint, requestBody) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.verifyServiceProviderHost + endpoint;
            const headers = { 'Content-Type': 'application/json' };
            this.requestLog('sending request: ', 'POST', url, headers, requestBody || '');
            return request({
                uri: url,
                method: 'POST',
                json: true,
                headers: headers,
                body: requestBody
            });
        });
    }
}
exports.default = VerifyServiceProviderClient;
